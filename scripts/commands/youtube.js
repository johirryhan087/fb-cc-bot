module.exports.config = {
  name: "youtube",
  version: "1.0.1",
  permission: 0,
  credits: "Nayan & YourName",
  description: "Download YouTube videos or audios",
  prefix: true,
  category: "Media",
  usages: "[search query | YouTube link]",
  cooldowns: 5,
  dependencies: {}
};

module.exports.handleReply = async function ({ api: e, event: a, handleReply: t }) {
  const axios = global.nodemodule.axios;
  const fs = global.nodemodule["fs-extra"];
  const { unlinkSync, statSync } = global.nodemodule["fs-extra"];

  // ‡¶á‡¶â‡¶ú‡¶æ‡¶∞‡ßá‡¶∞ ‡¶á‡¶®‡¶™‡ßÅ‡¶ü: "1 720" ‡¶Ö‡¶•‡¶¨‡¶æ "2 128" ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø
  const input = a.body.trim().split(" ");
  if (input.length !== 2) {
    return e.sendMessage("‡¶∏‡¶†‡¶ø‡¶ï ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞ ‡¶ï‡¶∞‡ßÅ‡¶®: ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßã‡ßü‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø (‡¶Ø‡ßá‡¶Æ‡¶®: 1 720 ‡¶Ö‡¶•‡¶¨‡¶æ 2 128)", a.threadID, a.messageID);
  }

  const chosenIndex = parseInt(input[0]);
  const quality = input[1];

  if (isNaN(chosenIndex) || chosenIndex < 1 || chosenIndex > t.link.length) {
    return e.sendMessage(`‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá 1 ‡¶•‡ßá‡¶ï‡ßá ${t.link.length} ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶è‡¶ï‡¶ü‡¶ø ‡¶∏‡¶Ç‡¶ñ‡ßç‡¶Ø‡¶æ ‡¶¶‡¶ø‡¶®‡•§`, a.threadID, a.messageID);
  }

  // ‡¶ï‡ßã‡ßü‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶†‡¶ø‡¶ï ‡¶ï‡¶∞‡¶æ
  // ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶ï‡ßã‡ßü‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø ‡¶∏‡¶æ‡¶ß‡¶æ‡¶∞‡¶£‡¶§ 360,480,720,1080 ‡¶á‡¶§‡ßç‡¶Ø‡¶æ‡¶¶‡¶ø
  // ‡¶Ö‡¶°‡¶ø‡¶ì ‡¶ï‡ßã‡ßü‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø 128,192,256,320
  let format = "";
  const videoQualities = ["360", "480", "720", "1080"];
  const audioQualities = ["128", "192", "256", "320"];

  if (videoQualities.includes(quality)) format = "mp4";
  else if (audioQualities.includes(quality)) format = "mp3";
  else {
    return e.sendMessage("‡¶Ö‡¶®‡ßÅ‡¶ó‡ßç‡¶∞‡¶π ‡¶ï‡¶∞‡ßá ‡¶∏‡¶†‡¶ø‡¶ï ‡¶ï‡ßã‡ßü‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø ‡¶¶‡¶ø‡¶®‡•§ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì: 360/480/720/1080 ‡¶Ö‡¶•‡¶¨‡¶æ ‡¶Ö‡¶°‡¶ø‡¶ì: 128/192/256/320", a.threadID, a.messageID);
  }

  e.unsendMessage(t.messageID);
  e.sendMessage("‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∂‡ßÅ‡¶∞‡ßÅ ‡¶π‡¶ö‡ßç‡¶õ‡ßá, ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...", a.threadID);

  try {
    const videoId = t.link[chosenIndex - 1];

    // ‡¶®‡¶§‡ßÅ‡¶® API URL ‡¶è‡¶¨‡¶Ç ‡¶ï‡ßÄ
    const apiUrl = `https://your-new-youtube-api.example.com/download`;
    const apiKey = "YOUR_NEW_API_KEY_HERE";

    // API ‡¶ï‡¶≤ - ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶Ü‡¶á‡¶°‡¶ø, ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶ì ‡¶ï‡ßã‡ßü‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶π‡¶ö‡ßç‡¶õ‡ßá
    const headers = { "x-api-key": apiKey };

    const response = (await axios.get(apiUrl, {
      headers,
      params: { id: videoId, format: format, quality: quality }
    })).data;

    if (!response || response.status === "fail" || !response.downloadUrl) {
      return e.sendMessage(`‡¶è‡¶á ${format === "mp4" ? "‡¶≠‡¶ø‡¶°‡¶ø‡¶ì" : "‡¶Ö‡¶°‡¶ø‡¶ì"} ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§`, a.threadID, a.messageID);
    }

    const downloadLink = response.downloadUrl;
    const filename = `youtube_download.${format}`;

    const fileData = (await axios.get(downloadLink, { responseType: "arraybuffer" })).data;
    fs.writeFileSync(__dirname + `/cache/${filename}`, Buffer.from(fileData, "utf-8"));

    const filePath = __dirname + `/cache/${filename}`;

    if (statSync(filePath).size > 26e6) {
      unlinkSync(filePath);
      return e.sendMessage("‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø 25MB ‡¶è‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø ‡¶π‡¶ì‡¶Ø‡¶º‡¶æ‡¶Ø‡¶º ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§", a.threadID, a.messageID);
    }

    return e.sendMessage({
      body: `¬ª ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶® ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶´‡¶æ‡¶á‡¶≤: ${filename}`,
      attachment: fs.createReadStream(filePath)
    }, a.threadID, () => fs.unlinkSync(filePath), a.messageID);

  } catch (error) {
    console.error(error);
    return e.sendMessage("‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", a.threadID, a.messageID);
  } finally {
    // ‡¶™‡ßÅ‡¶∞‡¶®‡ßã ‡¶ï‡ßç‡¶Ø‡¶æ‡¶∂ ‡¶´‡¶æ‡¶á‡¶≤ ‡¶°‡¶ø‡¶≤‡¶ø‡¶ü ‡¶ï‡¶∞‡¶æ
    for (let i = 1; i < 7; i++) {
      try {
        unlinkSync(__dirname + `/cache/${i}.png`);
      } catch {}
    }
  }
};

module.exports.run = async function ({ api: e, event: a, args: t }) {
  const axios = global.nodemodule.axios;
  const fs = global.nodemodule["fs-extra"];
  const simpleYoutubeApi = global.nodemodule["simple-youtube-api"];
  const { unlinkSync } = global.nodemodule["fs-extra"];

  // YouTube API key (‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ API keys ‡¶è‡¶∞ ‡¶Æ‡¶ß‡ßç‡¶Ø‡ßá ‡¶•‡ßá‡¶ï‡ßá ‡¶∞‚Äç‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡¶Æ)
  const youtubeApiKeys = [
    "AIzaSyB5A3Lum6u5p2Ki2btkGdzvEqtZ8KNLeXo",
    "AIzaSyAyjwkjc0w61LpOErHY_vFo6Di5LEyfLK0",
    "AIzaSyBY5jfFyaTNtiTSBNCvmyJKpMIGlpCSB4w",
    "AIzaSyCYCg9qpFmJJsEcr61ZLV5KsmgT1RE5aI4"
  ];
  const selectedYoutubeApiKey = youtubeApiKeys[Math.floor(Math.random() * youtubeApiKeys.length)];
  const youtubeApi = new simpleYoutubeApi(selectedYoutubeApiKey);

  if (!t.length) {
    return e.sendMessage("‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ñ‡¶æ‡¶≤‡¶ø ‡¶∞‡¶æ‡¶ñ‡¶æ ‡¶Ø‡¶æ‡¶¨‡ßá ‡¶®‡¶æ!", a.threadID, a.messageID);
  }

  const query = t.join(" ");

  if (query.startsWith("http://") || query.startsWith("https://")) {
    // ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶π‡ßç‡¶Ø‡¶æ‡¶®‡ßç‡¶°‡ßá‡¶≤‡¶ø‡¶Ç
    const videoIdMatch = query.match(/(?:youtu\.be\/|youtube\.com\/(?:watch\?(?:.*&)?v=|embed\/|v\/|shorts\/))([^&\n?#]+)/);
    if (!videoIdMatch) {
      return e.sendMessage("‡¶Ö‡¶ï‡¶æ‡¶∞‡ßç‡¶Ø‡¶ï‡¶∞ ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶≤‡¶ø‡¶Ç‡¶ï‡•§", a.threadID, a.messageID);
    }
    const videoId = videoIdMatch[1];

    e.sendMessage("‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá, ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...", a.threadID);

    try {
      // ‡¶°‡¶ø‡¶∞‡ßá‡¶ï‡ßç‡¶ü ‡¶≤‡¶ø‡¶Ç‡¶ï‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶®‡¶§‡ßÅ‡¶® API ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞
      const apiUrl = `https://your-new-youtube-api.example.com/download`;
      const apiKey = "YOUR_NEW_API_KEY_HERE";

      const headers = {
        "x-api-key": apiKey
      };

      const videoInfo = (await axios.get(apiUrl, {
        headers,
        params: { id: videoId }
      })).data;

      if (!videoInfo || videoInfo.status === "fail") {
        return e.sendMessage("‡¶è‡¶á ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§", a.threadID, a.messageID);
      }

      const msg = `‡¶è‡¶ï‡¶ü‡¶ø ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶®‡¶ø‡¶∞‡ßç‡¶¨‡¶æ‡¶ö‡¶® ‡¶ï‡¶∞‡ßÅ‡¶®:\n1. mp4 (‡¶≠‡¶ø‡¶°‡¶ø‡¶ì)\n2. mp3 (‡¶Ö‡¶°‡¶ø‡¶ì)\n\n‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶ø‡¶® (‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶®) ‡¶ï‡ßã‡¶® ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡ßá ‡¶Ü‡¶™‡¶®‡¶ø ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶ö‡¶æ‡¶®, ‡¶Ø‡ßá‡¶Æ‡¶®: 1 mp4`;

      return e.sendMessage({ body: msg }, a.threadID, (err, info) => {
        if (!err) {
          global.client.handleReply.push({
            name: this.config.name,
            messageID: info.messageID,
            author: a.senderID,
            link: [videoId]
          });
        }
      }, a.messageID);

    } catch (error) {
      console.error("Direct link download error:", error);
      return e.sendMessage("‡¶≤‡¶ø‡¶Ç‡¶ï ‡¶•‡ßá‡¶ï‡ßá ‡¶´‡¶æ‡¶á‡¶≤ ‡¶™‡ßç‡¶∞‡¶ï‡ßç‡¶∞‡¶ø‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§", a.threadID, a.messageID);
    }
  } else {
    // ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶´‡¶æ‡¶Ç‡¶∂‡¶®‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø

    try {
      let attachments = [];
      let messageBody = "¬ªüîé ‡¶Ü‡¶™‡¶®‡¶æ‡¶∞ ‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡ßÄ‡¶ì‡¶Ø‡¶º‡¶æ‡¶∞‡ßç‡¶°‡ßá‡¶∞ ‡¶∏‡¶æ‡¶•‡ßá ‡¶Æ‡¶ø‡¶≤‡ßá ‡¶Ø‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì‡¶ó‡ßÅ‡¶≤‡¶ø:\n\n";
      let videoLinks = [];
      let counter = 0;

      const searchResults = await youtubeApi.searchVideos(query, 6);

      for (const video of searchResults) {
        counter++;
        videoLinks.push(video.id);
        messageBody += `${counter}. ${video.title}\n‚ñ∂Ô∏è https://youtu.be/${video.id}\n\n`;
      }

      messageBody +=
        "‡¶®‡¶ø‡¶ö‡ßá ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶°‡ßá‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶â‡¶≤‡ßç‡¶≤‡ßá‡¶ñ ‡¶ï‡¶∞‡ßÅ‡¶®:\n" +
        "‡¶Ø‡ßá‡¶Æ‡¶®: '1 mp4' ‡¶¨‡¶æ '2 mp3' - ‡¶Ø‡ßá‡¶ñ‡¶æ‡¶®‡ßá ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞‡¶ü‡¶ø ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶è‡¶¨‡¶Ç mp4/mp3 ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü‡•§";

      return e.sendMessage(messageBody, a.threadID, (err, info) => {
        if (!err) {
          global.client.handleReply.push({
            name: this.config.name,
            messageID: info.messageID,
            author: a.senderID,
            link: videoLinks
          });
        }
      }, a.messageID);
    } catch (error) {
      console.error("Search error:", error);
      return e.sendMessage("‡¶Ö‡¶®‡ßÅ‡¶∏‡¶®‡ßç‡¶ß‡¶æ‡¶® ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ö‡ßá‡¶∑‡ßç‡¶ü‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®‡•§", a.threadID, a.messageID);
    }
  }
};
