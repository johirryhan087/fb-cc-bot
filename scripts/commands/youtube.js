const axios = require('axios');
const fs = require("fs-extra");

module.exports.config = {
  name: "youtube",
  version: "2.0.0",
  permission: 0,
  credits: "Mahir (Modified by OpenAI)",
  description: "Search & download YouTube videos/audios",
  prefix: true,
  category: "Media",
  usages: "[search query | YouTube link]",
  cooldowns: 5,
  dependencies: {}
};


module.exports.run = async ({ api, event, args }) => {
  const query = args.join(" ");
  if (!query) return api.sendMessage("üîé ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶á‡¶â‡¶ü‡¶ø‡¶â‡¶¨ ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶ü‡¶æ‡¶∞‡ßç‡¶Æ ‡¶¶‡¶ø‡¶®‡•§", event.threadID, event.messageID);

  const searchUrl = `https://youtubemediapro-production.up.railway.app/api/search?query=${encodeURIComponent(query)}`;

  try {
    const res = await axios.get(searchUrl);
    const results = res.data.results;

    if (!results || results.length === 0) {
      return api.sendMessage("üòû ‡¶ï‡¶ø‡¶õ‡ßÅ‡¶á ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø!", event.threadID, event.messageID);
    }

    const replyMessage = results.slice(0, 6).map((video, i) => (
      `${i + 1}. ${video.title} [${video.duration}]`
    )).join("\n");

    return api.sendMessage(
      `üîç ‡¶∏‡¶æ‡¶∞‡ßç‡¶ö ‡¶∞‡ßá‡¶ú‡¶æ‡¶≤‡ßç‡¶ü:\n\n${replyMessage}\n\n‚û°Ô∏è ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶ï‡¶∞‡ßá ‡¶≤‡¶ø‡¶ñ‡ßÅ‡¶®:\n[number] [vid/aud] [quality]\n\nüìå ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: 1 vid 480\nüìå ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü: video 480p`,
      event.threadID,
      (err, info) => {
        global.client.handleReply.push({
          name: module.exports.config.name,
          messageID: info.messageID,
          author: event.senderID,
          link: results.map(v => v.id)
        });
      },
      event.messageID
    );

  } catch (err) {
    console.error(err);
    return api.sendMessage("‚ùå ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶•‡ßá‡¶ï‡ßá ‡¶°‡ßá‡¶ü‡¶æ ‡¶Ü‡¶®‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá‡•§", event.threadID, event.messageID);
  }
};

module.exports.handleReply = async ({ api, event, handleReply }) => {
  const input = event.body.toLowerCase().trim().split(/\s+/);
  const index = parseInt(input[0]);

  if (isNaN(index) || index < 1 || index > handleReply.link.length) {
    return api.sendMessage("‚ùó ‡¶∏‡¶†‡¶ø‡¶ï ‡¶®‡¶Æ‡ßç‡¶¨‡¶∞ ‡¶¶‡¶ø‡¶® ‡¶Ø‡ßá‡¶Æ‡¶®: 1 vid 480 ‡¶¨‡¶æ 2 aud 128", event.threadID, event.messageID);
  }

  let format = input[1] || "vid";
  let quality = input[2];

  if (format !== "vid" && format !== "aud") {
    // ‡¶â‡¶¶‡¶æ‡¶π‡¶∞‡¶£: 1 480 ‚Üí format ‡¶®‡¶æ‡¶á, ‡¶§‡¶æ‡¶π‡¶≤‡ßá ‡¶ß‡¶∞‡ßá ‡¶®‡ßá‡¶ì‡ßü‡¶æ ‡¶π‡¶¨‡ßá vid
    if (!quality && /^\d+$/.test(input[1])) {
      quality = input[1];
      format = "vid";
    } else {
      return api.sendMessage("‚ùó ‡¶´‡¶∞‡¶Æ‡ßç‡¶Ø‡¶æ‡¶ü ‡¶π‡¶¨‡ßá vid ‡¶¨‡¶æ aud", event.threadID, event.messageID);
    }
  }

  // ‡¶°‡¶ø‡¶´‡¶≤‡ßç‡¶ü ‡¶ï‡ßã‡ßü‡¶æ‡¶≤‡¶ø‡¶ü‡¶ø
  if (!quality) quality = (format === "aud") ? "128" : "480";

  const videoId = handleReply.link[index - 1];

  const apiBase = "https://youtubemediapro-production.up.railway.app/api/get/download";
  const url = `${apiBase}?url=https://youtu.be/${videoId}&format=${format === "vid" ? "video" : "audio"}&quality=${quality}${format === "vid" ? "p" : "kbps"}`;

  api.unsendMessage(handleReply.messageID);
  api.sendMessage("‚è≥ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶π‡¶ö‡ßç‡¶õ‡ßá, ‡¶¶‡¶Ø‡¶º‡¶æ ‡¶ï‡¶∞‡ßá ‡¶Ö‡¶™‡ßá‡¶ï‡ßç‡¶∑‡¶æ ‡¶ï‡¶∞‡ßÅ‡¶®...", event.threadID);

  try {
    const res = await axios.get(url);
    if (!res.data.success) throw new Error("API ‡¶¨‡ßç‡¶Ø‡¶∞‡ßç‡¶• ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá ‡¶¨‡¶æ ‡¶≠‡¶ø‡¶°‡¶ø‡¶ì ‡¶™‡¶æ‡¶ì‡¶Ø‡¶º‡¶æ ‡¶Ø‡¶æ‡¶Ø‡¶º‡¶®‡¶ø‡•§");

    const downloadUrl = `https://youtubemediapro-production.up.railway.app${res.data.download_url}`;
    const fileRes = await axios.get(downloadUrl, { responseType: "arraybuffer" });

    const fileName = decodeURIComponent(res.data.file_path.split("/").pop());
    const filePath = __dirname + `/cache/${fileName}`;
    fs.writeFileSync(filePath, Buffer.from(fileRes.data, "binary"));

    if (fs.statSync(filePath).size > 25 * 1024 * 1024) {
      fs.unlinkSync(filePath);
      return api.sendMessage("‚ö†Ô∏è ‡¶´‡¶æ‡¶á‡¶≤‡¶ü‡¶ø 25MB ‡¶è‡¶∞ ‡¶¨‡ßá‡¶∂‡¶ø, ‡¶™‡¶æ‡¶†‡¶æ‡¶®‡ßã ‡¶Ø‡¶æ‡¶ö‡ßç‡¶õ‡ßá ‡¶®‡¶æ‡•§", event.threadID, event.messageID);
    }

    return api.sendMessage({
      body: `‚úÖ ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶∏‡¶Æ‡ßç‡¶™‡¶®‡ßç‡¶®: ${res.data.title}`,
      attachment: fs.createReadStream(filePath)
    }, event.threadID, () => fs.unlinkSync(filePath), event.messageID);

  } catch (err) {
    console.error("Download Error:", err.message);
    return api.sendMessage("‚ùå ‡¶°‡¶æ‡¶â‡¶®‡¶≤‡ßã‡¶° ‡¶ï‡¶∞‡¶§‡ßá ‡¶∏‡¶Æ‡¶∏‡ßç‡¶Ø‡¶æ ‡¶π‡¶Ø‡¶º‡ßá‡¶õ‡ßá:\n" + err.message, event.threadID, event.messageID);
  }
};
